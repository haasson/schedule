const { updateContext } = require('../../utils/context')
const { bot, botConfig } = require('../../config')
const { sheduleOptions } = require('../../config/options')
const handleMessage = require('./actions')
const { textContainsAny } = require('../../utils/strings')


const setInitialConfig = (chatId) => {
  const config = botConfig[chatId]
  if (!config) {
    botConfig[chatId] = {
      isBotSpeaks: true,
    }
  }
}

const shouldSkipMessage = (msg) => {
  return msg.from.is_bot || !msg.text
}


const onMessage = async (msg) => {

  if (shouldSkipMessage(msg)) return

  const chatId = msg.chat.id;
  setInitialConfig(chatId)
  updateContext()


  try {
    if (msg.text.split('@')[0] === '/seriozha' || textContainsAny(msg.text, ["–≥—Ä–∞—Ñ–∏–∫", "—Ä–∞–±–æ—Ç–∞–µ—Ç"]) && textContainsAny(msg.text, ["—Å–µ—Ä–µ–∂", "—Å–µ—Ä—ë–∂"])) {
      return await bot.sendMessage(chatId, `–£–∑–Ω–∞–π –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç –°–µ—Ä—ë–∂–∞`, sheduleOptions);
    }
    // if (checkSchedule()) {
    //   return bot.sendMessage(chatId, `–£–∑–Ω–∞–π –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç –°–µ—Ä—ë–∂–∞`, sheduleOptions)
    // }

    handleMessage(msg)
  } catch (e) {
    console.log(e)
    return bot.sendMessage(chatId, '–û–ø–∞, –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞! –ù–µ —Ä—É–≥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –æ–Ω –≤–∞—è–µ—Ç –∫–∞–∫ —É–º–µ–µ—Ç ü•∫');
  }
}


module.exports = {
  onMessage
}