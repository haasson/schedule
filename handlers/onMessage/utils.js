const { botConfig } = require("../../config")
const { getCurrentRates } = require("../../services/currency")
const { getTomorrowWeather, getWeatherForecast, getCurrentWeather } = require("../../services/weather")
const { saveContext, context } = require("../../utils/context")
const { getRandomArrayElement } = require("../../utils/math")
const { textContains } = require("../../utils/strings")
const { isNowMentioned, isWeatherMentioned, isQuestion, isForecastMentioned } = require("./conditions")
const { putToDatabase, getFromDatabase, deleteFromDatabase } = require('../../services/database')
const { names, secondNames } = require('../../data/eleonoraNames')

const simplePhrases = [
  { text: '–∫–æ–º–º—É–Ω–∏–∑–º', answer: '–ö–æ–º–º—É–Ω–∏–∑–º - –≥–æ–≤–Ω–æ!' },
  { text: '–≤–∏–≤–∞ –ª—è —Ä–∞–∑–∞', answer: '–ê—Å—Ç–∞–ª–∞ –º—É—ç—Ä—Ç—ç!' },
  { text: '–Ω–µ–±—É–ª', answer: '–†–∞–º–∏–∑ —Ö—É–π–Ω—é –Ω–µ –∑–∞–±—å–µ—Ç!' },
  { text: '—á–∏—Å—Ç–∏–ª–∏—â', answer: '–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –ø–æ—Å–µ—â–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ!' },
  { text: ' –≥–æ—Ä–Ω—ã–π', answer: () => `${getRandomArrayElement(names)} ${getRandomArrayElement(secondNames)} —É–∂–µ –∂–¥—ë—Ç!` },
]

let silenceTimer
const disableSilentMode = ({ chat }) => {
  const message = botConfig[chat.id].isBotSpeaks ? '–ê —è —É–∂–µ –¥–∞–≤–Ω–æ —Ç—É—Ç' : '–Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏ :)'
  botConfig[chat.id].isBotSpeaks = true
  silenceTimer && clearTimeout(silenceTimer)
  return message
}

const enableSilentMode = () => {
  saveContext('silent')
  return '–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∑–∞—Ç–∫–Ω—É—Ç—å—Å—è?'
}

const setSilencePeriod = ({ text, chat }) => {
  const minutes = text.match(/\d+/g)?.[0]

  if (minutes) {
    setTimeout(() => botConfig[chat.id].isBotSpeaks = false, 300)
    delete context.silent
    silenceTimer = setTimeout(() => botConfig[chat.id].isBotSpeaks = true, minutes * 60 * 1000)
    return `–ó–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ ${minutes} –º–∏–Ω—É—Ç`
  }
}

const enableHuificator = () => {
  setTimeout(() => botConfig.mode = 'huificator', 300)
  return `–•—É–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω`
}

const disableHuificator = () => {
  botConfig.mode = ''
  return `–•—É–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω`
}



const getWeather = async ({ text }) => {
  if (textContains(text, "–∑–∞–≤—Ç—Ä–∞")) {
    const { forecast } = await getTomorrowWeather()
    const { type, min, max } = forecast[0]
    saveContext("weather")
    return `–ó–∞–≤—Ç—Ä–∞ ${type}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç ${min} –¥–æ ${max}`
  }

  if (isForecastMentioned(text)) {
    const strings = ["–°–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]
    const { forecast } = await getWeatherForecast(3)
    const message = forecast.reduce((memo, day, index) => {
      const { type, min, max } = day
      return memo += `${strings[index]} ${type}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç ${min} –¥–æ ${max}; `
    }, '')
    saveContext("weather")
    return message.slice(0, -2)
  }

  if (context.weather && isNowMentioned(text) || isWeatherMentioned(text) && isQuestion(text)) {
    const { current } = await getCurrentWeather()
    const { type, temp, feelslike } = current
    saveContext("weather")
    return `–°–µ–π—á–∞—Å ${type}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${temp}, –ø–æ –æ—â—É—â–µ–Ω–∏—è–º ${feelslike}`
  }
}

const getRates = async () => {
  const rates = await getCurrentRates()
  return `–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nüá∫üá∏ ${rates.usd}\nüá™üá∫ ${rates.eur}\nüá∞üáø ${rates.kzt}`
}

const enableSaveMixMode = () => {
  saveContext('saveMix')
  return '–ù–∞–ø–∏—à–∏ –∫–∞–∫–æ–π –º–∏–∫—Å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'
}

const saveMix = async ({ text, from, date }) => {
  const key = `mixes/${date}`
  const payload = {
    description: text,
    user: from.first_name,
    date,
  }
  await putToDatabase({ [key]: payload })
  putToDatabase({ [`archive/${key}`]: payload })

  delete context.saveMix
  return '–ú–∏–∫—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É'
}

const enableDeleteMixMode = async (msg) => {
  const numbers = msg.text.match(/\d+/g)
  if (numbers?.length) {
    const text = numbers.join(' ')
    return await deleteMix({ ...msg, text })
  }

  saveContext('deleteMix')
  return '–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä–∞ –º–∏–∫—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å "–£–¥–∞–ª–∏ –º–∏–∫—Å –ù–æ–º–µ—Ä–∞ –º–∏–∫—Å–æ–≤" –∏ —è —Å—Ä–∞–∑—É —É–¥–∞–ª—é –∏—Ö –∏–∑ –±–∞–∑—ã'
}

const deleteMix = async ({ text }) => {
  const indexes = text.split(' ').filter(el => typeof +el === 'number')

  delete context.deleteMix
  if (!indexes) {
    return '–ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, –Ω–∏—Ö–µ—Ä–∞ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ'
  }

  const mixes = await getFromDatabase('mixes')
  if (!mixes) {
    return '–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –º–∏–∫—Å–æ–≤, –ø—Ä–∏–¥—É—Ä–æ–∫!'
  }
  const promises = indexes.map(index => {
    return new Promise(async (resolve) => {
      const mixToRemove = Object.keys(mixes)[+index - 1]
      if (mixToRemove) {
        await deleteFromDatabase(`mixes/${mixToRemove}`)
        resolve(index)
      }
      resolve(null)
    })
  })

  try {
    let res = await Promise.all(promises)
    res = res.filter(el => !!el)
    if (!res.length) {
      return '–ù–µ—Ç —Ç–∞–∫–∏—Ö –º–∏–∫—Å–æ–≤!'
    }

    if (res.length < indexes.length) {
      const removedIndexes = res.reduce((memo, value) => memo += `${value}, `, '')
      return `–£–¥–∞–ª–∏–ª —Ç–æ–ª—å–∫–æ ${res.length === 1 ? '–º–∏–∫—Å' : '–º–∏–∫—Å—ã'} –Ω–æ–º–µ—Ä ${removedIndexes.slice(0, -2)}. –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –Ω–∞—à–µ–ª, —Å–æ—Ä—è–Ω`
    }

    return res.length > 1 ? '–¢—É–¥–∞ –∏–º –∏ –¥–æ—Ä–æ–≥–∞' : '–≠—Ç–æ –±—ã–ª –Ω–µ–≤–∫—É—Å–Ω—ã–π –º–∏–∫—Å, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω —Ç–µ–±—è –Ω–µ –ø–æ–±–µ—Å–ø–æ–∫–æ–∏—Ç'
  } catch (error) {
    console.error('error', error)
    return '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å( –°–ø—Ä–æ—Å–∏ –ñ–µ–∫—É —á—ë –∑–∞ —Ö—É–π–Ω—è'
  }
}

const showAllMixes = async () => {
  const mixes = await getFromDatabase('mixes')
  if (!mixes) {
    return '–ú–∏–∫—Å–æ–≤ –Ω–µ—Ç, –Ω–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å'
  }
  const text = Object.values(mixes).reduce((memo, mix, index) => {
    return memo += `${index + 1}. ${mix.description}. –î–æ–±–∞–≤–∏–ª ${mix.user}\n`
  }, '')

  return text
}

const showRandomMix = async () => {
  const mixes = await getFromDatabase('mixes')
  if (!mixes) {
    return '–ú–∏–∫—Å–æ–≤ –Ω–µ—Ç, –Ω–æ –≤—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å'
  }
  const mix = getRandomArrayElement(Object.values(mixes))

  return `${mix.description}. –î–æ–±–∞–≤–∏–ª ${mix.user}`
}

module.exports = {
  simplePhrases,
  disableSilentMode,
  enableSilentMode,
  setSilencePeriod,
  disableHuificator,
  enableHuificator,
  getWeather,
  getRates,
  enableSaveMixMode,
  saveMix,
  enableDeleteMixMode,
  deleteMix,
  showAllMixes,
  showRandomMix,
}